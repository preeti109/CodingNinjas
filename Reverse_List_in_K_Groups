/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* reverseLinkedList(Node *head) {
    Node* temp = head;  
    Node* prev = nullptr;
    
    while(temp != nullptr) {  
        Node* front = temp->next;  
        temp->next = prev;  
        prev = temp;  
        temp = front; 
    }
    return prev;  
}

Node* getKthNode(Node* temp, int k) {
    k -= 1; 
    while(temp != nullptr && k > 0) {
        k--; 
        temp = temp->next; 
    }
    return temp; 
}

Node* kReverse(Node* head, int k) {
    Node* temp = head; 
    Node* prevLast = nullptr; 

    while(temp != nullptr) {
        Node* kThNode = getKthNode(temp, k); 
        if(kThNode == nullptr) {
            if(prevLast) {
                prevLast->next = temp; 
            }
            break; 
        }

        Node* nextNode = kThNode->next; 
        kThNode->next = nullptr; 
        reverseLinkedList(temp); 

        if(temp == head) {
            head = kThNode;
        } else {
            prevLast->next = kThNode; 
        }

        prevLast = temp; 
        temp = nextNode; 
    }
    return head; 
}
