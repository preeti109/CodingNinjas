/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *random;
 *		Node() : data(0), next(nullptr), random(nullptr){};
 *		Node(int x) : data(x), next(nullptr), random(nullptr) {}
 *		Node(int x, Node *next, Node *random) : data(x), next(next), random(random) {}
 * };
 */

Node* insertCopyInBetween(Node* head) {
    Node* temp = head;
	while(temp != NULL) {
		Node* nextElement = temp->next;
		Node* copy = new Node(temp->data);
		copy->next = nextElement;
		temp->next = copy;
		temp = nextElement;
	}
}

Node* connectRandomPointer(Node* head) {
    Node* temp = head;
	while(temp != NULL) {
		Node* copyNode = temp->next;
		if(temp->random) copyNode->random = temp->random->next;
		else copyNode->random = NULL;
		temp = temp->next->next;
	}
}

Node* getDeepCopyList(Node* head) {
	Node* temp = head;
	Node* dummy = new Node(-1);
	Node* res = dummy;
	while(temp != NULL) {
		res->next = temp->next;
		res = res->next;
		temp->next = temp->next->next;
		temp = temp->next;
	}
	return dummy->next;
}

Node *cloneLL(Node *head){
	insertCopyInBetween(head);
	connectRandomPointer(head);
	return getDeepCopyList(head);
}
